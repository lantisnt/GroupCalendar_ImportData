-- This file is part of  Group Calendar Import Data WoW Classic AddOn.

--  Group Calendar Import Data WoW Classic AddOn is free software: 
-- you can redistribute it and/or modify it
-- under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

--  Group Calendar Import Data WoW Classic AddOn is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with  Group Calendar Import Data WoW Classic AddOn.
-- If not, see <https://www.gnu.org/licenses/>.
--[[
  local GroupCalendar_ImportDataOptions_Defaults = { -- Defaults
    Modes = {
      Safety = 1, -- Mana
      Classification = {
        Health  = 0, -- Disabled
        Mana = 1 -- Average
      }
    },
    Values = {
      Mana = 0.6,
      Health = 0.75,
      Refresh = 3
    }
}

function GroupCalendar_ImportDataOptions_Init()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_Init")
  
  if not GroupCalendar_ImportDataOptions then -- SavedVariable
    GroupCalendar_ImportDataOptions = {
      Modes = {
        Safety = GroupCalendar_ImportDataOptions_Defaults.Modes.Safety,
        Classification = {
          Health  = GroupCalendar_ImportDataOptions_Defaults.Modes.Classification.Health,
          Mana = GroupCalendar_ImportDataOptions_Defaults.Modes.Classification.Mana
        }
      },
      Values = {
        Mana = GroupCalendar_ImportDataOptions_Defaults.Values.Mana,
        Health = GroupCalendar_ImportDataOptions_Defaults.Values.Health,
        Refresh = GroupCalendar_ImportDataOptions_Defaults.Values.Refresh
      }
    }
  end
  
  GroupCalendar_ImportDataOptions_Temporary = table.clone(GroupCalendar_ImportDataOptions)
  
end

-----------------------
-- GETTERS / SETTERS --
-----------------------
function GroupCalendar_ImportDataOptions_GetSafetyMode()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_GetSafetyMode")
  return GroupCalendar_ImportDataOptions.Modes.Safety
end

-- Health Classification Mode Getters/Setters
function GroupCalendar_ImportDataOptions_GetHealthClassificationMode()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_GetHealthClassificationMode")
  return GroupCalendar_ImportDataOptions.Modes.Classification.Health
end

-- Mana Classification Mode Getters/Setters
function GroupCalendar_ImportDataOptions_GetManaClassificationMode()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_GetManaClassificationMode")
  return GroupCalendar_ImportDataOptions.Modes.Classification.Mana
end

-- Utility 
function GroupCalendar_ImportDataOptions_GetSafetyModeSplit()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_GetSafetyModeSplit")
  local health, mana;
  if GroupCalendar_ImportDataOptions.Modes.Safety == SafePullClassic_Constants.SAFETY_MODES.Mana then
    health = false; mana = true;
  elseif GroupCalendar_ImportDataOptions.Modes.Safety == SafePullClassic_Constants.SAFETY_MODES.Health then
    health = true; mana = false;
  elseif GroupCalendar_ImportDataOptions.Modes.Safety == SafePullClassic_Constants.SAFETY_MODES.Both then
    health = true; mana = true;
  else
    health = false; mana = false;
  end
  
  return health, mana
      
end

------------------------
-------- CORE ----------
------------------------
function GroupCalendar_ImportDataOptions_Save()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_Save")
  -- Validation
  
  -- All Dropdown inputs are autogenerated thus not needing validation
  -- This is ofcourse naive as Options are Global and other addons can touch it.

  -- Sanity
  if GroupCalendar_ImportDataOptions_Temporary.Values.Health == 0 then 
    GroupCalendar_ImportDataOptions_Temporary.Values.Health = GroupCalendar_ImportDataOptions_Defaults.Values.Health
  end
  
  if GroupCalendar_ImportDataOptions_Temporary.Values.Mana == 0 then 
    GroupCalendar_ImportDataOptions_Temporary.Values.Mana = GroupCalendar_ImportDataOptions_Defaults.Values.Mana
  end
  
  if GroupCalendar_ImportDataOptions_Temporary.Values.Refresh == 0 then 
    GroupCalendar_ImportDataOptions_Temporary.Values.Refresh = GroupCalendar_ImportDataOptions_Defaults.Values.Refresh
  end
  
  -- Saturation
  if GroupCalendar_ImportDataOptions_Temporary.Values.Health < 0 then GroupCalendar_ImportDataOptions_Temporary.Values.Health = 0 end
  if GroupCalendar_ImportDataOptions_Temporary.Values.Health > 1 then GroupCalendar_ImportDataOptions_Temporary.Values.Health = 1 end
  -- Saturation
  if GroupCalendar_ImportDataOptions_Temporary.Values.Mana < 0 then GroupCalendar_ImportDataOptions_Temporary.Values.Mana = 0 end
  if GroupCalendar_ImportDataOptions_Temporary.Values.Mana > 1 then GroupCalendar_ImportDataOptions_Temporary.Values.Mana = 1 end
  -- Min limit
  if GroupCalendar_ImportDataOptions_Temporary.Values.Refresh < 0.1 then GroupCalendar_ImportDataOptions_Temporary.Values.Refresh = 0.1 end
  
  -- Save
  GroupCalendar_ImportDataOptions = GroupCalendar_ImportDataOptions_Temporary
end

function GroupCalendar_ImportDataOptions_Load()
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_Load")
  GroupCalendar_ImportDataOptions_Temporary = table.clone(GroupCalendar_ImportDataOptions)
end

------------------------
------- DISPLAY --------
------------------------
local function OptionsDropDown_OnClick(data)	
  SafePullClassic_Log("OptionsDropDown_OnClick")
	UIDropDownMenu_SetSelectedValue(data.owner, data.value);
	CloseDropDownMenus();
end

local function SafetyModeDropDown_OnClick(data)
  GroupCalendar_ImportDataOptions_Temporary.Modes.Safety = data.value
  OptionsDropDown_OnClick(data)
end

local function InitilizeDropDownMenu_SafetyMode(frame, level, menuList)
  SafePullClassic_Log("InitilizeDropDownMenu_SafetyMode")
  
  for key, value in orderedPairs(SafePullClassic_Constants.DISPLAY.SAFETY_MODES) do
    UIDropDownMenu_AddButton({text = value, value = key, owner = frame, func = SafetyModeDropDown_OnClick});
  end
  
  if GroupCalendar_ImportDataOptions_Temporary then
    UIDropDownMenu_SetSelectedValue(frame, GroupCalendar_ImportDataOptions.Modes.Safety)
  end
end

local function HealthClassificationModeDropDown_OnClick(data)
  GroupCalendar_ImportDataOptions_Temporary.Modes.Classification.Health = data.value
  OptionsDropDown_OnClick(data)
end

local function InitilizeDropDownMenu_HealthClassificationMode(frame, level, menuList)
  SafePullClassic_Log("InitilizeDropDownMenu_HealthClassificationMode")
  
  for key, value in orderedPairs(SafePullClassic_Constants.DISPLAY.CLASSIFICATION_MODES) do
    UIDropDownMenu_AddButton({text = value, value = key, owner = frame, func = HealthClassificationModeDropDown_OnClick});
  end
  
  if GroupCalendar_ImportDataOptions_Temporary then
    UIDropDownMenu_SetSelectedValue(frame, GroupCalendar_ImportDataOptions.Modes.Classification.Health)
  end
end

local function ManaClassificationModeDropDown_OnClick(data)
  GroupCalendar_ImportDataOptions_Temporary.Modes.Classification.Mana = data.value
  OptionsDropDown_OnClick(data)
end

local function InitilizeDropDownMenu_ManaClassificationMode(frame, level, menuList)
  SafePullClassic_Log("InitilizeDropDownMenu_ManaClassificationMode")
  
  for key, value in orderedPairs(SafePullClassic_Constants.DISPLAY.CLASSIFICATION_MODES) do
    UIDropDownMenu_AddButton({text = value, value = key, owner = frame, func = ManaClassificationModeDropDown_OnClick});
  end
  
  if GroupCalendar_ImportDataOptions_Temporary then
    UIDropDownMenu_SetSelectedValue(frame, GroupCalendar_ImportDataOptions.Modes.Classification.Mana)
  end
end

local function OptionsUI_Setup()
  SafePullClassic_Log("OptionsUI_Setup")
  ------------
  -- Safety --
  ------------
  
  -- Header
  SafePullClassicOptionsFrame_Safety_Header_String:SetText("Safety")
  -- Drop Down
  SafePullClassicOptionsFrame_Safety_Body_DropDown_Title_String:SetText("Safety checking mode")
  UIDropDownMenu_Initialize(SafePullClassicOptionsFrame_Safety_Body_DropDown_Value, InitilizeDropDownMenu_SafetyMode)
  UIDropDownMenu_Refresh(SafePullClassicOptionsFrame_Safety_Body_DropDown_Value)
  -------------
  -- Refresh --
  -------------
  
  -- Header
  SafePullClassicOptionsFrame_Refresh_Header_String:SetText("Refresh")
  -- Input
  SafePullClassicOptionsFrame_Refresh_Body_Input_Title_String:SetText("Refresh rate [sec]")
  if GroupCalendar_ImportDataOptions_Temporary then
    SafePullClassicOptionsFrame_Refresh_Body_Input_Value:SetText(tostring(GroupCalendar_ImportDataOptions_Temporary.Values.Refresh))
    SafePullClassicOptionsFrame_Refresh_Body_Input_Value:SetCursorPosition(0)
  end
  ------------
  -- Health --
  ------------

  -- Header
  SafePullClassicOptionsFrame_Health_Header_String:SetText("Health")
  -- Drop Down
  SafePullClassicOptionsFrame_Health_Body_DropDown_Title_String:SetText("Health checking mode")
  UIDropDownMenu_Initialize(SafePullClassicOptionsFrame_Health_Body_DropDown_Value, InitilizeDropDownMenu_HealthClassificationMode)
  UIDropDownMenu_Refresh(SafePullClassicOptionsFrame_Health_Body_DropDown_Value)
  -- Input
  SafePullClassicOptionsFrame_Health_Body_Input_Title_String:SetText("Health value [%]")
  if GroupCalendar_ImportDataOptions_Temporary then
    SafePullClassicOptionsFrame_Health_Body_Input_Value:SetText(tostring(GroupCalendar_ImportDataOptions_Temporary.Values.Health * 100))
    SafePullClassicOptionsFrame_Health_Body_Input_Value:SetCursorPosition(0)
  end

  ----------
  -- Mana --
  ----------
  
  -- Header
  SafePullClassicOptionsFrame_Mana_Header_String:SetText("Mana")
  -- Drop Down
  SafePullClassicOptionsFrame_Mana_Body_DropDown_Title_String:SetText("Mana checking mode")
  UIDropDownMenu_Initialize(SafePullClassicOptionsFrame_Mana_Body_DropDown_Value, InitilizeDropDownMenu_ManaClassificationMode)
  UIDropDownMenu_Refresh(SafePullClassicOptionsFrame_Mana_Body_DropDown_Value)
  -- Input
  SafePullClassicOptionsFrame_Mana_Body_Input_Title_String:SetText("Mana value [%]")
  if GroupCalendar_ImportDataOptions_Temporary then
    SafePullClassicOptionsFrame_Mana_Body_Input_Value:SetText(tostring(GroupCalendar_ImportDataOptions_Temporary.Values.Mana * 100))
    SafePullClassicOptionsFrame_Mana_Body_Input_Value:SetCursorPosition(0)
  end
end

local function OptionsUI_Refresh()
  SafePullClassic_Log("OptionsUI_Refresh")
  
  GroupCalendar_ImportDataOptions_Load()
  OptionsUI_Setup()
end

local function OptionsUI_Save()
  SafePullClassic_Log("OptionsUI_Save")

  GroupCalendar_ImportDataOptions_Temporary.Values.Refresh = SafePullClassicOptionsFrame_Refresh_Body_Input_Value:GetNumber()
  --SafePullClassicOptionsFrame_Refresh_Body_Input_Value:SetText("") 
  GroupCalendar_ImportDataOptions_Temporary.Values.Mana = SafePullClassicOptionsFrame_Mana_Body_Input_Value:GetNumber() / 100
  --SafePullClassicOptionsFrame_Mana_Body_Input_Value:SetText("") 
  -- Input as % - change to fraction
  GroupCalendar_ImportDataOptions_Temporary.Values.Health = SafePullClassicOptionsFrame_Health_Body_Input_Value:GetNumber() / 100
  --SafePullClassicOptionsFrame_Health_Body_Input_Value:SetText("")

  GroupCalendar_ImportDataOptions_Save()
  
  SafePullClassic_Setup() -- Re-setup
end

local function OptionsUI_Cancel()
  SafePullClassic_Log("OptionsUI_Cancel")

end

local function OptionsUI_Default()
  SafePullClassic_Log("OptionsUI_Default")
  GroupCalendar_ImportDataOptions = table.clone(GroupCalendar_ImportDataOptions_Defaults)
end

------------------------
-------- EVENTS --------
------------------------
function GroupCalendar_ImportDataOptions_OnLoad(frame)
  SafePullClassic_Log("GroupCalendar_ImportDataOptions_OnLoad")
  frame.name = "SafePullClassic"
  frame.okay = OptionsUI_Save
  frame.cancel = OptionsUI_Cancel
  frame.refresh = OptionsUI_Refresh
  frame.default = OptionsUI_Default

  InterfaceOptions_AddCategory(frame);
  OptionsUI_Setup()
end]]--